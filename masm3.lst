Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/17/18 16:12:24
masm3.asm						     Page 1 - 1


				;----------------------------------------------------------------------------------------------------
				;	FILE NAME : masm3.asm
				;----------------------------------------------------------------------------------------------------
				;
				;		Program Name	:	MASM3
				;		Programmer		:	Cody Thompson 
				;		Class			:	CS 3B || Asm Lang
				;		Date			:	4/02/2018
				;		Purpose			:
				;		This program will
				;
				;----------------------------------------------------------------------------------------------------

					.486

					;Includes
					include ..\..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					include string1.inc
			      C 
			      C setString PROTO stringAddr:DWORD
			      C 
			      C String_equals PROTO intStr1Addr:DWORD, intStr2Addr:DWORD
			      C 
			      C String_equalsIgnoreCase PROTO intStr1Addr:DWORD, intStr2Addr:DWORD
			      C 
			      C String_copy PROTO intStr1Addr:DWORD
			      C 
			      C String_substring_1 PROTO intStrAddr:DWORD, intBeginInd:DWORD, intEndInd:DWORD
			      C 
			      C String_substring_2 PROTO intStrAddr:DWORD, intStartInd:DWORD
			      C 
			      C String_charat PROTO intStrAddr:DWORD, intStrLength:DWORD
			      C 
			      C String_startsWith_1 PROTO intStrAddr:DWORD, intStr2Addr:DWORD, intPos:DWORD
			      C 
			      C String_startsWith_2 PROTO intStrAddr:DWORD, intStr2Addr:DWORD
			      C 
			      C String_endsWith PROTO intStrAddr:DWORD, intStr2Addr:DWORD
			      C 
					
					;Prototypes
					getstring	PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					putstring	PROTO Near32 stdcall, lpStringToPrint:dword
					ascint32 	PROTO Near32 stdcall, lpStringOfNumericChars:dword
					intasc32	proto Near32 stdcall, lpStringToHold:dword, dval:dword
					ExitProcess PROTO, dwExitCode:dword
					
					;External Prototypes
					EXTERN setString@4:PROC
					EXTERN String_equals@8:PROC
					EXTERN String_equalsIgnoreCase@8:PROC
					EXTERN String_copy@4:PROC
					EXTERN String_substring_1@12:PROC
					EXTERN String_substring_2@8:PROC
					EXTERN String_charat@8:PROC
					EXTERN String_startsWith_1@12:PROC
					EXTERN String_startsWith_2@8:PROC
					EXTERN String_endsWith@8:PROC

					;Constants


					;Data segment
 00000000				.data
 00000000 4E 55 4C 4C 20	strString1		BYTE "NULL                           ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 00000020 4E 55 4C 4C 20	strString2 		BYTE "NULL                           ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00

 00000040 2A 2A 2A 2A 2A	strMenu 		BYTE 		"*********************************************************", 0Ah
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 0A
 0000007A 2A 20 20 20 20	strMenu1		BYTE 		"*                       MASM 3                          *", 0Ah
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   41 53 4D 20 33
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 0A
 000000B4 2A 20 2D 2D 2D	strMenu2		BYTE 		"* ------------------------------------------------------- ", 0Ah
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 20 0A
 000000EF 2A 20 3C 31 3E	strMenu3		BYTE 		"* <1> Set String1                                currently:", 0
	   20 53 65 74 20
	   53 74 72 69 6E
	   67 31 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 63
	   75 72 72 65 6E
	   74 6C 79 3A 00
 0000012B 00000000 R		dStr1Ptr		DWORD OFFSET strString1															
 0000012F 0A 2A 20 3C 32	strMenu4		BYTE 0Ah, 	"* <2> Set String2                                currently:", 0
	   3E 20 53 65 74
	   20 53 74 72 69
	   6E 67 32 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000016C 00000020 R		dStr2Ptr		DWORD OFFSET strString2
 00000170 0A 2A 20 3C 33	strMenu5		BYTE 0Ah,	"* <3> String_length (string1)                    currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 6C
	   65 6E 67 74 68
	   20 28 73 74 72
	   69 6E 67 31 29
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000001AD 30			bLength			BYTE 30h, 4 dup(0)
	   00000004 [
	    00
	   ]
 000001B2 0A 2A 20 3C 34	strMenu6		BYTE 0Ah,   "* <4> String_equals (string1, string2)           currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 65
	   71 75 61 6C 73
	   20 28 73 74 72
	   69 6E 67 31 2C
	   20 73 74 72 69
	   6E 67 32 29 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000001EF 000006E4 R		dEqualsPtr		DWORD OFFSET strFalse
 000001F3 0A 2A 20 3C 35	strMenu7		BYTE 0Ah,   "* <5> String_equalsIgnoreCase(string1, string2)  currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 65
	   71 75 61 6C 73
	   49 67 6E 6F 72
	   65 43 61 73 65
	   28 73 74 72 69
	   6E 67 31 2C 20
	   73 74 72 69 6E
	   67 32 29 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000230 000006E4 R		dCaseEqualsPtr	DWORD OFFSET strFalse
 00000234 0A 2A 20 3C 36	strMenu8		BYTE 0Ah,   "* <6> String_copy(string1)                       &", 0
	   3E 20 53 74 72
	   69 6E 67 5F 63
	   6F 70 79 28 73
	   74 72 69 6E 67
	   31 29 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   26 00
 00000268 20 20 63 75 72	strMenu8a		BYTE "  currently:", 0
	   72 65 6E 74 6C
	   79 3A 00
 00000275 0A 2A 20 3C 37	strMenu9		BYTE 0Ah,   "* <7> String_substring_1                         &", 0
	   3E 20 53 74 72
	   69 6E 67 5F 73
	   75 62 73 74 72
	   69 6E 67 5F 31
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   26 00
 000002A9 20 20 63 75 72	strMenu9a		BYTE "  currently:", 0
	   72 65 6E 74 6C
	   79 3A 00
 000002B6 0A 2A 20 3C 38	strMenu10		BYTE 0Ah,   "* <8> String_substring_2                         &", 0
	   3E 20 53 74 72
	   69 6E 67 5F 73
	   75 62 73 74 72
	   69 6E 67 5F 32
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   26 00
 000002EA 20 20 63 75 72	strMenu10a		BYTE "  currently:", 0
	   72 65 6E 74 6C
	   79 3A 00
 000002F7 0A 2A 20 3C 39	strMenu11		BYTE 0Ah,   "* <9> String_charAt                              currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 63
	   68 61 72 41 74
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000334  00000002 [		strCharAt 		BYTE 2 DUP(0)
	    00
	   ]
 00000336 0A 2A 20 3C 31	strMenu12		BYTE 0Ah,   "* <10> String_startsWith_1                       currently:", 0
	   30 3E 20 53 74
	   72 69 6E 67 5F
	   73 74 61 72 74
	   73 57 69 74 68
	   5F 31 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000373 0A 2A 20 3C 31	strMenu13		BYTE 0Ah,   "* <11> String_startsWith_2                       currently:", 0
	   31 3E 20 53 74
	   72 69 6E 67 5F
	   73 74 61 72 74
	   73 57 69 74 68
	   5F 32 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000003B0 0A 2A 20 3C 31	strMenu14		BYTE 0Ah,   "* <12> String_endsWith                           currently:", 0
	   32 3E 20 53 74
	   72 69 6E 67 5F
	   65 6E 64 73 57
	   69 74 68 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000003ED 0A 2A 20 3C 31	strMenu15		BYTE 0Ah,   "* <13> String_indexOf_1                          currently:", 0
	   33 3E 20 53 74
	   72 69 6E 67 5F
	   69 6E 64 65 78
	   4F 66 5F 31 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000042A 0A 2A 20 3C 31	strMenu16		BYTE 0Ah,   "* <14> String_indexOf_2                          currently:", 0
	   34 3E 20 53 74
	   72 69 6E 67 5F
	   69 6E 64 65 78
	   4F 66 5F 32 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000467 0A 2A 20 3C 31	strMenu17		BYTE 0Ah,   "* <15> String_indexOf_3                          currently:", 0
	   35 3E 20 53 74
	   72 69 6E 67 5F
	   69 6E 64 65 78
	   4F 66 5F 33 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000004A4 0A 2A 20 3C 31	strMenu18		BYTE 0Ah,   "* <16> String_lastIndexOf_1                      currently:", 0
	   36 3E 20 53 74
	   72 69 6E 67 5F
	   6C 61 73 74 49
	   6E 64 65 78 4F
	   66 5F 31 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000004E1 0A 2A 20 3C 31	strMenu19		BYTE 0Ah,   "* <17> String_lastIndexOf_2                      currently:", 0
	   37 3E 20 53 74
	   72 69 6E 67 5F
	   6C 61 73 74 49
	   6E 64 65 78 4F
	   66 5F 32 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000051E 0A 2A 20 3C 31	strMenu20		BYTE 0Ah,   "* <18> String_lastIndexOf_3                      currently:", 0
	   38 3E 20 53 74
	   72 69 6E 67 5F
	   6C 61 73 74 49
	   6E 64 65 78 4F
	   66 5F 33 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000055B 0A 2A 20 3C 31	strMenu21		BYTE 0Ah,   "* <19> String_concat                             currently:", 0
	   39 3E 20 53 74
	   72 69 6E 67 5F
	   63 6F 6E 63 61
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000598 0A 2A 20 3C 32	strMenu22		BYTE 0Ah,   "* <20> String_replace                            currently:", 0
	   30 3E 20 53 74
	   72 69 6E 67 5F
	   72 65 70 6C 61
	   63 65 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000005D5 0A 2A 20 3C 32	strMenu23		BYTE 0Ah,   "* <21> String_toLowerCase                        currently:", 0
	   31 3E 20 53 74
	   72 69 6E 67 5F
	   74 6F 4C 6F 77
	   65 72 43 61 73
	   65 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000612 0A 2A 20 3C 32	strMenu24		BYTE 0Ah,   "* <22> String_toUpperCase                        currently:", 0
	   32 3E 20 53 74
	   72 69 6E 67 5F
	   74 6F 55 70 70
	   65 72 43 61 73
	   65 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000064F 0A 2A 20 3C 32	strMenu25		BYTE 0Ah,   "* <23> Quit                                               *", 0Ah
	   33 3E 20 51 75
	   69 74 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   0A
 0000068C 2A 2A 2A 2A 2A	strMenu26		BYTE        "***********************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A
 000006C7 0A 43 68 6F 69	strChoice		BYTE 0Ah, "Choice (1-23): ", 0
	   63 65 20 28 31
	   2D 32 33 29 3A
	   20 00

 000006D8  00000003 [		strInput		BYTE 3 DUP(?), 0
	    00
	   ] 00
 000006DC 00000000		dChoice			DWORD ?
 000006E0 00000000		dlength			DWORD 0
 000006E4 46 41 4C 53 45	strFalse		BYTE "FALSE", 0
	   00
 000006EA 54 52 55 45 00	strTrue			BYTE "TRUE", 0 
 000006EF 54 68 65 20 64	strErrChoice	BYTE "The desired choice does not exist, re-enter your choice.", 0Ah, 0
	   65 73 69 72 65
	   64 20 63 68 6F
	   69 63 65 20 64
	   6F 65 73 20 6E
	   6F 74 20 65 78
	   69 73 74 2C 20
	   72 65 2D 65 6E
	   74 65 72 20 79
	   6F 75 72 20 63
	   68 6F 69 63 65
	   2E 0A 00
 00000729 4E 55 4C 4C 00	strNull			BYTE "NULL", 0
 0000072E 57 68 69 63 68	strStringSelect BYTE "Which string do you want the length of( 1 or 2): ", 0
	   20 73 74 72 69
	   6E 67 20 64 6F
	   20 79 6F 75 20
	   77 61 6E 74 20
	   74 68 65 20 6C
	   65 6E 67 74 68
	   20 6F 66 28 20
	   31 20 6F 72 20
	   32 29 3A 20 00
 00000760  00000002 [		strSelection    BYTE 2 DUP(0)
	    00
	   ]

 00000762 00000729 R		dStr6Ptr		DWORD OFFSET strNull
 00000766 00000729 R		dStr7Ptr		DWORD OFFSET strNull
 0000076A 00000729 R		dStr8Ptr		DWORD OFFSET strNull
 0000076E 00000729 R		dPtrCharAt		DWORD OFFSET strNull
 00000772 000006E4 R		dStarts1Ptr		DWORD OFFSET strFalse
 00000776 000006E4 R		dStarts2Ptr		DWORD OFFSET strFalse
 0000077A 000006E4 R		dEndsPtr		DWORD OFFSET strFalse

 0000077E 50 6C 65 61 73	strCharAtPrompt				BYTE 	"Please input an index: ", 0	
	   65 20 69 6E 70
	   75 74 20 61 6E
	   20 69 6E 64 65
	   78 3A 20 00
 00000796 50 6C 65 61 73	strSubStringPrompt			BYTE 	"Please input a starting index: ", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   73 74 61 72 74
	   69 6E 67 20 69
	   6E 64 65 78 3A
	   20 00
 000007B6 0A 50 6C 65 61	strSubStringPrompt2			BYTE 	0Ah, "Please input an ending index: ", 0
	   73 65 20 69 6E
	   70 75 74 20 61
	   6E 20 65 6E 64
	   69 6E 67 20 69
	   6E 64 65 78 3A
	   20 00
 000007D6  00000005 [		strStartInd					BYTE 	5 DUP(0)
	    00
	   ]
 000007DB  00000005 [		strEndInd					BYTE 	5 DUP(0)
	    00
	   ]
 000007E0 00000000		intStartInd					DWORD 	?
 000007E4 00000000		intEndInd					DWORD	?
 000007E8 0A 54 68 65 20	strOutOBounds				BYTE 	0Ah, "The specified index is out of bounds, please re-enter your selection", 0Ah, 0
	   73 70 65 63 69
	   66 69 65 64 20
	   69 6E 64 65 78
	   20 69 73 20 6F
	   75 74 20 6F 66
	   20 62 6F 75 6E
	   64 73 2C 20 70
	   6C 65 61 73 65
	   20 72 65 2D 65
	   6E 74 65 72 20
	   79 6F 75 72 20
	   73 65 6C 65 63
	   74 69 6F 6E 0A
	   00
 0000082F  00000005 [		strCharInd					BYTE 	5 DUP(0)
	    00
	   ]
 00000834 00000000		intCharInd					DWORD	?


 00000838 0A 00			strNewLn		BYTE 0Ah, 0
					;Code segment
 00000000				.code
 00000000			main proc								;start of main ;start of program
 00000000  B8 00000000			MOV EAX, 0								;arbitrary

 00000005			START:		
 00000005  E8 00000017			CALL menu								;call the menu sub routine
					
 0000000A  83 3D 000006DC R		CMP dChoice, 23							;compare dChoice value to 23
	   17
 00000011  74 07			JE QUIT									;if dChoice is equal to 23 then jump to QUIT
					
 00000013  E8 00000201			CALL getSubRoutine						;call the getSubRoutine sub routine
					
 00000018  EB EB			JMP START								;jump to START
					
 0000001A			QUIT:	
					INVOKE ExitProcess,0				;terminate program
 00000021			main ENDP								;end of main procedure

				;----------------------------------------------------------------------------------------------------
 00000021			menu proc
				;
				;		Outputs the menu to the console and waits for input.  The choice is converted from ascii to 
				;	int, for simpler comparison, and then validated.  The choice is then stored into memory labeled 
				;	'intChoice'.
				;
				;	Receives nothing
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
 00000021  E8 00000000 E		CALL Clrscr								;clear the screen
 00000026  E8 00000048			CALL menuOut

 0000002B			GET:
					INVOKE getstring, addr strInput, 3		;get the string from the console and store it into memory labeled 'strInput'
					INVOKE ascint32, addr strInput			;convert the string from ascii values to integer values
 00000041  A3 000006DC R		MOV dChoice, EAX						;move the value resulting from ascint32 to memory labeled dChoice
					
 00000046  83 3D 000006DC R		cmp dChoice, 23							;compare dChoice to 23
	   17
 0000004D  74 23			JE RETURN								;jump to RETURN if the comparison is equal
 0000004F  7F 0B			JG INVALID								;jump to INVALID if the comparison is greater than 23
					
 00000051  83 3D 000006DC R		CMP dChoice, 1							;compare dChoice to 1
	   01
 00000058  7C 02			JL INVALID								;jump to invalid if the comparison is less than 1
 0000005A  EB 16			JMP RETURN								;jump to RETURN
					
 0000005C			INVALID:
 0000005C  BA 000006EF R		MOV EDX, OFFSET strErrChoice			;move the offset address of strErrChoice into EDX
 00000061  E8 00000000 E		CALL WriteString						;call WriteString sub routine
 00000066  BA 000006C7 R		MOV EDX, OFFSET strChoice				;move the offset address of strChoice into EDX
 0000006B  E8 00000000 E		CALL WriteString						;call WriteString sub routine
 00000070  EB B9			JMP GET									;jump to GET
					
 00000072			RETURN:
 00000072  C3				RET										;return
 00000073			menu ENDP								;end of menu

				;----------------------------------------------------------------------------------------------------
 00000073			menuOut proc
				;
				;		Outputs the menu to the console and waits for input.  The choice is converted from ascii to 
				;	int, for simpler comparison, and then validated.  The choice is then stored into memory labeled 
				;	'intChoice'.
				;
				;	Receives nothing
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
					
					INVOKE putstring, addr strMenu
					INVOKE putstring, dStr1Ptr
					INVOKE putstring, addr strMenu4
					INVOKE putstring, dStr2Ptr
					INVOKE putstring, addr strMenu5
					INVOKE putstring, addr bLength
					INVOKE putstring, addr strMenu6
					INVOKE putstring, dEqualsPtr
					INVOKE putstring, addr strMenu7
					INVOKE putstring, dCaseEqualsPtr
					INVOKE putstring, addr strMenu8
 000000E5  A1 00000762 R		MOV EAX, dStr6Ptr
 000000EA  E8 00000000 E		CALL WriteHex
					INVOKE putstring, addr strMenu8a
					INVOKE putstring, dStr6Ptr
					INVOKE putstring, addr strMenu9
 0000010E  A1 00000766 R		MOV EAX, dStr7Ptr
 00000113  E8 00000000 E		CALL WriteHex
					INVOKE putstring, addr strMenu9a
					INVOKE putstring, dStr7Ptr
					INVOKE putstring, addr strMenu10
 00000137  A1 0000076A R		MOV EAX, dStr8Ptr
 0000013C  E8 00000000 E		CALL WriteHex
					INVOKE putstring, addr strMenu10a
					INVOKE putstring, dStr8Ptr
					INVOKE putstring, addr strMenu11
					INVOKE putString, dPtrCharAt
					INVOKE putstring, addr strMenu12
					INVOKE putString, dStarts1Ptr
					INVOKE putstring, addr strMenu13
					INVOKE putString, dStarts2Ptr
					INVOKE putstring, addr strMenu14
					INVOKE putString, dEndsPtr
					INVOKE putstring, addr strMenu15
					INVOKE putstring, addr strMenu16
					INVOKE putstring, addr strMenu17
					INVOKE putstring, addr strMenu18
					INVOKE putstring, addr strMenu19
					INVOKE putstring, addr strMenu20
					INVOKE putstring, addr strMenu21
					INVOKE putstring, addr strMenu22
					INVOKE putstring, addr strMenu23
					INVOKE putstring, addr strMenu24
					INVOKE putstring, addr strMenu25
					
 00000218  C3				RET
 00000219			menuOut ENDP


				;----------------------------------------------------------------------------------------------------
 00000219			getSubRoutine proc
				;
				;		This sub routine will first push the offset addresses for strString1 and strString2 on to the 
				;	stack and then call the appropriate sub routine.  The choice that was input from the menu sub routine
				;	will be moved into EAX and compared against hard coded values to call the specified sub routine.
				;
				;	Receives nothing 
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
 00000219  B8 00000020 R		MOV EAX, OFFSET strString2				;move the offset address of strString2 into EAX
 0000021E  BB 00000000 R		MOV EBX, OFFSET strString1				;move the offset address of strString1 into EBX
					
 00000223  8B 15 000006DC R		MOV EDX, dChoice						;move dChoice into EDX for if statements
					
					.if EDX == 1;---------------------------	
 0000022E  53				PUSH EBX								;push EBX
 0000022F  E8 00000000 E		CALL setString@4						;call setString@4
					;ADD ESP, 4								;add 4 bytes to ESP
					
 00000234  E9 00000360			JMP RETURN
					
					.elseif EDX == 2;-----------------------
 00000243  50				PUSH EAX								;push EAX
 00000244  E8 00000000 E		CALL setString@4						;call setString@4
					;ADD ESP, 4								;add 4 bytes to ESP
					
 00000249  E9 0000034B			JMP RETURN
					
					.elseif EDX == 3;-----------------------
 00000258  E8 00000000 E		CALL Clrscr
					
					INVOKE putString, addr strStringSelect	;display prompt
					INVOKE getString, addr strSelection, 3	;get input
					
 00000273  80 3D 00000760 R		CMP strSelection, 32h					;compare to ascii code for integer 1
	   32
 0000027A  74 03			JE STR2
					
 0000027C  53				PUSH EBX								;push EBX
 0000027D  EB 06			JMP LENGTHCALL							;jump to call
 0000027F			STR2:
 0000027F  B8 00000020 R		MOV EAX, OFFSET strString2				;move the offset address of strString2 into EAX
 00000284  50				PUSH EAX								;push EAX
					
 00000285			LENGTHCALL:
 00000285  E8 00000310			CALL String_length						;call String_length
					INVOKE intasc32, addr bLength, EAX		;convert integer into ascii characters
					
 00000295  E9 000002FF			JMP RETURN
					
					.elseif EDX == 4;-----------------------
 000002A4  BA 000006E4 R		MOV EDX, OFFSET strFalse				;move the offset address of strFalse into EDX
 000002A9  89 15 000001EF R		MOV dEqualsPtr, EDX						;set dEqualsPtr equal to EDX
					
 000002AF  50				PUSH EAX								;push EAX
 000002B0  53				PUSH EBX								;push EBX
 000002B1  E8 00000000 E		CALL String_equals@8					;call String_equals@8
					
 000002B6  3C 00			CMP AL, 0								;compare AL to zero
 000002B8  74 0B			JE J4									;jump to J4 if AL == 0
 000002BA  BA 000006EA R		MOV EDX, OFFSET strTrue					;move the offset address of strTrue into EDX
 000002BF  89 15 000001EF R		MOV dEqualsPtr, EDX						;set dEqualsPtr equal to EDX
 000002C5			J4:
 000002C5  E9 000002CF			JMP RETURN
					
					.elseif EDX == 5;-----------------------
 000002D4  BA 000006E4 R		MOV EDX, OFFSET strFalse				;move the offset address of strFalse into EDX
 000002D9  89 15 00000230 R		MOV dCaseEqualsPtr, EDX					;set dCaseEqualsPtr equal to EDX
					
 000002DF  50				PUSH EAX								;push EAX
 000002E0  53				PUSH EBX								;push EBX
 000002E1  E8 00000000 E		CALL String_equalsIgnoreCase@8			;call String_equalsIgnoreCase
					
 000002E6  3C 00			CMP AL, 0								;compare AL to zero
 000002E8  74 0B			JE J5									;jump to J5 if AL == 0
 000002EA  BA 000006EA R		MOV EDX, OFFSET strTrue					;move the offset address of strTrue into EDX
 000002EF  89 15 00000230 R		MOV dCaseEqualsPtr, EDX					;set dCaseEqualsPtr equal to EDX
 000002F5			J5:
 000002F5  E9 0000029F			JMP RETURN
					
					.elseif EDX == 6;-----------------------
 00000304  53				PUSH EBX								;push EBX to the stack
 00000305  E8 00000000 E		CALL String_copy@4						;call String_copy@4
 0000030A  A3 00000762 R		MOV dStr6Ptr, EAX						;move new address into memory
					
 0000030F  E9 00000285			JMP RETURN
					
					.elseif EDX == 7;-----------------------
 00000322  E8 00000000 E		CALL Clrscr										;clear the screen
					
 00000327				PROMPT7a:
 00000327  BB 00000000			MOV EBX, 0										;move 0 into EBX
					INVOKE putString, addr strSubStringPrompt		;write prompt to the console
					INVOKE getString, addr strStartInd, 3			;get input from the console
					INVOKE ascint32, addr strStartInd				;convert ascii values to real integer values
 0000034C  8B C8			MOV ECX, EAX									;move result into ECX
					
 0000034E  83 F9 01			CMP ECX, 1										;compare result to 1
 00000351  7C 5C			JL OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value is >1
 00000353  BE 00000000 R		MOV ESI, OFFSET strString1						;move the offset address of strString1 into ESI
 00000358  56				PUSH ESI										;push ESI
 00000359  E8 0000023C			CALL String_length								;get length of [intStrAddr]	
 0000035E  3B C8			CMP ECX, EAX									;compare result to stringLrngth
 00000360  7F 4D			JG OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value > length
					
 00000362			PROMPT7b:	
 00000362  BB 00000001			MOV EBX, 1										;move 1 into EBX
					INVOKE putString, addr strSubStringPrompt2		;write prompt to the console							;call WriteString
					INVOKE getString, addr strEndInd, 3				;get the input from the console
					INVOKE ascint32, addr strEndInd					;convert ascii values to real integer values
 00000387  A3 000007E4 R		MOV intEndInd, EAX								;move result of conversion into intEndInd
 0000038C  8B D0			MOV EDX, EAX									;move result into EDX

 0000038E  83 FA 01			CMP EDX, 1										;compare result to 1
 00000391  7C 1C			JL OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value is >1
 00000393  56				PUSH ESI										;push ESI
 00000394  E8 00000201			CALL String_length								;get length of [intStrAddr]	
 00000399  3B D0			CMP EDX, EAX									;compare result to stringLrngth
 0000039B  7F 12			JG OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value > length
					
 0000039D  52				PUSH EDX										;push EDX
 0000039E  51				PUSH ECX										;push ECX
 0000039F  56				PUSH ESI										;PUSH ESI
 000003A0  E8 00000000 E		CALL String_substring_1@12						;call String_substring_1@8
 000003A5  A3 00000766 R		MOV dStr7Ptr, EAX								;move resulting address to dStr7Ptr
					
 000003AA  E9 000001EA			JMP RETURN
					
 000003AF			OUTOFBOUNDS7:
					INVOKE putString, addr strOutOBounds			;output out of bounds message to the console
 000003B9  83 FB 00			CMP EBX, 0										;compare EBX to 0 (first or second prompt)
 000003BC  0F 84 FFFFFF65		JE PROMPT7a										;jump if equal to PROMPT1
 000003C2  EB 9E			JMP PROMPT7b									;otherwise jump to PROMPT2
					
					.elseif EDX == 8;-----------------------
 000003CE  E8 00000000 E		CALL Clrscr										;call clear screen

 000003D3				PROMPT8:
 000003D3  BB 00000000			MOV EBX, 0										;move 0 into EBX
					INVOKE putString, addr strSubStringPrompt		;write prompt to the console
					INVOKE getString, addr strStartInd, 3			;get input from the console
					INVOKE ascint32, addr strStartInd				;convert ascii values to real integer values
 000003F8  8B C8			MOV ECX, EAX									;move result into ECX
					
 000003FA  83 F9 01			CMP ECX, 1										;compare result to 1
 000003FD  7C 20			JL OUTOFBOUNDS8									;jump to OUTOFBOUNDS if the input value is >1
 000003FF  BE 00000000 R		MOV ESI, OFFSET strString1						;move the offset address of strString1 into ESI
 00000404  56				PUSH ESI										;push ESI
 00000405  E8 00000190			CALL String_length								;get length of [intStrAddr]	
 0000040A  3B C8			CMP ECX, EAX									;compare result to stringLrngth
 0000040C  7F 11			JG OUTOFBOUNDS8									;jump to OUTOFBOUNDS if the input value > length
					

 0000040E  51				PUSH ECX										;push ECX
 0000040F  56				PUSH ESI										;push ESI
 00000410  E8 00000000 E		CALL String_substring_2@8						;call String_substring_1@8
 00000415  A3 0000076A R		MOV dStr8Ptr, EAX								;move new address into memory
					
 0000041A  E9 0000017A			JMP RETURN
					
 0000041F			OUTOFBOUNDS8:
					INVOKE putString, addr strOutOBounds			;output the out of bounds message to the console
 00000429  EB A8			JMP PROMPT8
					
					.elseif EDX == 9;-----------------------
 00000435  E8 00000000 E		CALL Clrscr											;call clear screen
					
					INVOKE putString, addr strCharAtPrompt			;write index prompt to the console
					INVOKE getString, addr strCharInd, 3			;get input from the console
					INVOKE ascint32, addr strCharInd				;convert ascii values to real integer values
					
 0000045A  50				PUSH EAX										;push EAX
 0000045B  53				PUSH EBX										;push ESI
 0000045C  E8 00000000 E		CALL String_charat@8							;call String_charat
					
 00000461  3C 00			CMP AL, 0
 00000463  0F 84 00000130		JE RETURN
 00000469  C7 05 0000076E R		MOV dPtrCharAt, OFFSET strCharAt
	   00000334 R
 00000473  A2 00000334 R		MOV strCharAt, AL
					
 00000478  E9 0000011C			JMP RETURN
					
					.elseif EDX == 10;-----------------------
 00000487  E8 00000000 E		CALL Clrscr
 0000048C  BA 000006E4 R		MOV EDX, OFFSET strFalse						;move the offset address of strFalse into EDX
 00000491  89 15 00000772 R		MOV dStarts1Ptr, EDX							;set dEqualsPtr equal to EDX
					
					INVOKE putString, addr strCharAtPrompt			;write index prompt to the console
					INVOKE getString, addr strCharInd, 3			;get input from the console
					INVOKE ascint32, addr strCharInd				;convert ascii values to real integer values
					
 000004B7  50				PUSH EAX										;push EAX
 000004B8  B8 00000020 R		MOV EAX, OFFSET strString2						;move the offset address of strString2 into EAX
 000004BD  50				PUSH EAX										;push EAX
 000004BE  53				PUSH EBX										;push ESI
 000004BF  E8 00000000 E		CALL String_startsWith_1@12						;call String_startsWith_1
					
 000004C4  3C 00			CMP AL, 0										;compare AL to zero
 000004C6  74 0B			JE J10											;jump to J4 if AL == 0
 000004C8  BA 000006EA R		MOV EDX, OFFSET strTrue							;move the offset address of strTrue into EDX
 000004CD  89 15 00000772 R		MOV dStarts1Ptr, EDX							;set dEqualsPtr equal to EDX
 000004D3			J10:
 000004D3  E9 000000C1			JMP RETURN
					
					.elseif EDX == 11;-----------------------
 000004E2  E8 00000000 E		CALL Clrscr
 000004E7  BA 000006E4 R		MOV EDX, OFFSET strFalse						;move the offset address of strFalse into EDX
 000004EC  89 15 00000776 R		MOV dStarts2Ptr, EDX							;set dEqualsPtr equal to EDX
					
 000004F2  50				PUSH EAX										;push EAX
 000004F3  53				PUSH EBX										;push ESI
 000004F4  E8 00000000 E		CALL String_startsWith_2@8						;call String_startsWith_1
					
 000004F9  3C 00			CMP AL, 0										;compare AL to zero
 000004FB  74 0B			JE J11											;jump to J4 if AL == 0
 000004FD  BA 000006EA R		MOV EDX, OFFSET strTrue							;move the offset address of strTrue into EDX
 00000502  89 15 00000776 R		MOV dStarts2Ptr, EDX							;set dEqualsPtr equal to EDX
 00000508			J11:
 00000508  E9 0000008C			JMP RETURN
					
					.elseif EDX == 12;-----------------------
 00000517  E8 00000000 E		CALL Clrscr
 0000051C  BA 000006E4 R		MOV EDX, OFFSET strFalse						;move the offset address of strFalse into EDX
 00000521  89 15 0000077A R		MOV dEndsPtr, EDX								;set dEqualsPtr equal to EDX
					
 00000527  50				PUSH EAX										;push EAX
 00000528  53				PUSH EBX										;push ESI
 00000529  E8 00000000 E		CALL String_endsWith@8							;call String_startsWith_1
					
 0000052E  3C 00			CMP AL, 0										;compare AL to zero
 00000530  74 0B			JE J12											;jump to J4 if AL == 0
 00000532  BA 000006EA R		MOV EDX, OFFSET strTrue							;move the offset address of strTrue into EDX
 00000537  89 15 0000077A R		MOV dEndsPtr, EDX								;set dEqualsPtr equal to EDX
 0000053D			J12:
 0000053D  EB 5A			JMP RETURN
					
					.elseif EDX == 13;-----------------------
 00000546  EB 51			JMP RETURN
					
					.elseif EDX == 14;-----------------------
 0000054F  EB 48			JMP RETURN
					
					.elseif EDX == 15;-----------------------
 00000558  EB 3F			JMP RETURN
					
					.elseif EDX == 16;-----------------------
 00000561  EB 36			JMP RETURN
					
					.elseif EDX == 17;-----------------------
 0000056A  EB 2D			JMP RETURN
					
					.elseif EDX == 18;-----------------------
 00000573  EB 24			JMP RETURN
					
					.elseif EDX == 19;-----------------------
 0000057C  EB 1B			JMP RETURN
					
					.elseif EDX == 20;-----------------------
 00000585  EB 12			JMP RETURN
					
					.elseif EDX == 21;-----------------------
 0000058E  EB 09			JMP RETURN
					
					.elseif EDX == 22;-----------------------
 00000597  EB 00			JMP RETURN
					
					.endif
					
 00000599			RETURN:
 00000599  C3				RET										;return
 0000059A			getSubRoutine ENDP						;end of getSubRoutine

				;----------------------------------------------------------------------------------------------------
 0000059A			String_length proc, intStrAddr:DWORD
				;
				;		This sub routine counts the number of elements in strStringX and stores the result in EAX.
				;
				;	Receives the address of strStringX
				;	Returns the value in the EAX register
				;----------------------------------------------------------------------------------------------------
 0000059D  BB 00000000			MOV EBX, 0								;clear the EBX register
 000005A2  B8 00000000			MOV EAX, 0								;clear the EAX register
					
 000005A7  8B 7D 08			MOV EDI, intStrAddr						;move str1Addr into EDI for indirect addressing
					
 000005AA			L1:
 000005AA  8A 1F			MOV BL, [EDI]							;move the nth element of strString1 into BL
 000005AC  80 FB 00			CMP BL, 0								;compare BL to 0
 000005AF  74 04			JE RETURN								;jump to RETURN if the comparison is equal
 000005B1  40				INC EAX									;increment EAX
 000005B2  47				INC EDI									;increment string address to go to the next element
 000005B3  EB F5			JMP L1									;loop to L1
					
 000005B5			RETURN:
					RET										;return
 000005B9			String_length ENDP						;end of String_length

				end main								;end of main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/17/18 16:12:24
masm3.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000083A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005B9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_charat  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_copy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_endsWith  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_equalsIgnoreCase  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_equals  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_length  . . . . . . . . .	P Near	 0000059A _TEXT	Length= 0000001F Public STDCALL
  intStrAddr . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 000005AA _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000005B5 _TEXT	
String_startsWith_1  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_startsWith_2  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_substring_1 . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_substring_2 . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getSubRoutine  . . . . . . . . .	P Near	 00000219 _TEXT	Length= 00000381 Public STDCALL
  STR2 . . . . . . . . . . . . .	L Near	 0000027F _TEXT	
  LENGTHCALL . . . . . . . . . .	L Near	 00000285 _TEXT	
  J4 . . . . . . . . . . . . . .	L Near	 000002C5 _TEXT	
  J5 . . . . . . . . . . . . . .	L Near	 000002F5 _TEXT	
  PROMPT7a . . . . . . . . . . .	L Near	 00000327 _TEXT	
  PROMPT7b . . . . . . . . . . .	L Near	 00000362 _TEXT	
  OUTOFBOUNDS7 . . . . . . . . .	L Near	 000003AF _TEXT	
  PROMPT8  . . . . . . . . . . .	L Near	 000003D3 _TEXT	
  OUTOFBOUNDS8 . . . . . . . . .	L Near	 0000041F _TEXT	
  J10  . . . . . . . . . . . . .	L Near	 000004D3 _TEXT	
  J11  . . . . . . . . . . . . .	L Near	 00000508 _TEXT	
  J12  . . . . . . . . . . . . .	L Near	 0000053D _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000599 _TEXT	
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  START  . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000001A _TEXT	
menuOut  . . . . . . . . . . . .	P Near	 00000073 _TEXT	Length= 000001A6 Public STDCALL
menu . . . . . . . . . . . . . .	P Near	 00000021 _TEXT	Length= 00000052 Public STDCALL
  GET  . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
  INVALID  . . . . . . . . . . .	L Near	 0000005C _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000072 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setString  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
String_charat@8  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_copy@4  . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_endsWith@8  . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_equals@8  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_equalsIgnoreCase@8  . . .	L Near	 00000000 FLAT	External STDCALL
String_startsWith_1@12 . . . . .	L Near	 00000000 FLAT	External STDCALL
String_startsWith_2@8  . . . . .	L Near	 00000000 FLAT	External STDCALL
String_substring_1@12  . . . . .	L Near	 00000000 FLAT	External STDCALL
String_substring_2@8 . . . . . .	L Near	 00000000 FLAT	External STDCALL
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bLength  . . . . . . . . . . . .	Byte	 000001AD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dCaseEqualsPtr . . . . . . . . .	DWord	 00000230 _DATA	
dChoice  . . . . . . . . . . . .	DWord	 000006DC _DATA	
dEndsPtr . . . . . . . . . . . .	DWord	 0000077A _DATA	
dEqualsPtr . . . . . . . . . . .	DWord	 000001EF _DATA	
dPtrCharAt . . . . . . . . . . .	DWord	 0000076E _DATA	
dStarts1Ptr  . . . . . . . . . .	DWord	 00000772 _DATA	
dStarts2Ptr  . . . . . . . . . .	DWord	 00000776 _DATA	
dStr1Ptr . . . . . . . . . . . .	DWord	 0000012B _DATA	
dStr2Ptr . . . . . . . . . . . .	DWord	 0000016C _DATA	
dStr6Ptr . . . . . . . . . . . .	DWord	 00000762 _DATA	
dStr7Ptr . . . . . . . . . . . .	DWord	 00000766 _DATA	
dStr8Ptr . . . . . . . . . . . .	DWord	 0000076A _DATA	
dlength  . . . . . . . . . . . .	DWord	 000006E0 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intCharInd . . . . . . . . . . .	DWord	 00000834 _DATA	
intEndInd  . . . . . . . . . . .	DWord	 000007E4 _DATA	
intStartInd  . . . . . . . . . .	DWord	 000007E0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
setString@4  . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
strCharAtPrompt  . . . . . . . .	Byte	 0000077E _DATA	
strCharAt  . . . . . . . . . . .	Byte	 00000334 _DATA	
strCharInd . . . . . . . . . . .	Byte	 0000082F _DATA	
strChoice  . . . . . . . . . . .	Byte	 000006C7 _DATA	
strEndInd  . . . . . . . . . . .	Byte	 000007DB _DATA	
strErrChoice . . . . . . . . . .	Byte	 000006EF _DATA	
strFalse . . . . . . . . . . . .	Byte	 000006E4 _DATA	
strInput . . . . . . . . . . . .	Byte	 000006D8 _DATA	
strMenu10a . . . . . . . . . . .	Byte	 000002EA _DATA	
strMenu10  . . . . . . . . . . .	Byte	 000002B6 _DATA	
strMenu11  . . . . . . . . . . .	Byte	 000002F7 _DATA	
strMenu12  . . . . . . . . . . .	Byte	 00000336 _DATA	
strMenu13  . . . . . . . . . . .	Byte	 00000373 _DATA	
strMenu14  . . . . . . . . . . .	Byte	 000003B0 _DATA	
strMenu15  . . . . . . . . . . .	Byte	 000003ED _DATA	
strMenu16  . . . . . . . . . . .	Byte	 0000042A _DATA	
strMenu17  . . . . . . . . . . .	Byte	 00000467 _DATA	
strMenu18  . . . . . . . . . . .	Byte	 000004A4 _DATA	
strMenu19  . . . . . . . . . . .	Byte	 000004E1 _DATA	
strMenu1 . . . . . . . . . . . .	Byte	 0000007A _DATA	
strMenu20  . . . . . . . . . . .	Byte	 0000051E _DATA	
strMenu21  . . . . . . . . . . .	Byte	 0000055B _DATA	
strMenu22  . . . . . . . . . . .	Byte	 00000598 _DATA	
strMenu23  . . . . . . . . . . .	Byte	 000005D5 _DATA	
strMenu24  . . . . . . . . . . .	Byte	 00000612 _DATA	
strMenu25  . . . . . . . . . . .	Byte	 0000064F _DATA	
strMenu26  . . . . . . . . . . .	Byte	 0000068C _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 000000B4 _DATA	
strMenu3 . . . . . . . . . . . .	Byte	 000000EF _DATA	
strMenu4 . . . . . . . . . . . .	Byte	 0000012F _DATA	
strMenu5 . . . . . . . . . . . .	Byte	 00000170 _DATA	
strMenu6 . . . . . . . . . . . .	Byte	 000001B2 _DATA	
strMenu7 . . . . . . . . . . . .	Byte	 000001F3 _DATA	
strMenu8a  . . . . . . . . . . .	Byte	 00000268 _DATA	
strMenu8 . . . . . . . . . . . .	Byte	 00000234 _DATA	
strMenu9a  . . . . . . . . . . .	Byte	 000002A9 _DATA	
strMenu9 . . . . . . . . . . . .	Byte	 00000275 _DATA	
strMenu  . . . . . . . . . . . .	Byte	 00000040 _DATA	
strNewLn . . . . . . . . . . . .	Byte	 00000838 _DATA	
strNull  . . . . . . . . . . . .	Byte	 00000729 _DATA	
strOutOBounds  . . . . . . . . .	Byte	 000007E8 _DATA	
strSelection . . . . . . . . . .	Byte	 00000760 _DATA	
strStartInd  . . . . . . . . . .	Byte	 000007D6 _DATA	
strString1 . . . . . . . . . . .	Byte	 00000000 _DATA	
strString2 . . . . . . . . . . .	Byte	 00000020 _DATA	
strStringSelect  . . . . . . . .	Byte	 0000072E _DATA	
strSubStringPrompt2  . . . . . .	Byte	 000007B6 _DATA	
strSubStringPrompt . . . . . . .	Byte	 00000796 _DATA	
strTrue  . . . . . . . . . . . .	Byte	 000006EA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
